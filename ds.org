#+TITLE: Data Structure
#+AUTHOR: Holy Frege
#+DESCRIPTION: Org-HTML export made simple.
#+KEYWORDS:  org-mode, export, html, theme, style, css, js, bigblow
#+LANGUAGE:  en
#+OPTIONS:   H:4 toc:t num:2  ^:nil
#+MACRO: color @@html:<font color=></font>@@
#+PROPERTY:  header-args :padline no
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+LATEX_HEADER: \usepackage{kotex}
#+latex_header: \hypersetup{colorlinks=true}
* Data에 관해서
#+begin_note
data가 무엇이고 어떤 data들이 있나?라는 질문을 받는다고 하자. 떠오르는 생각은 data는 이 세상의 어떤것들, 존재들이 data라고 할 수 있을 꺼 같다. 그런데 data를 처리하는 programming 언어에서는 세상에 존재하는 것들을 숫자, 문자,boolean으로 나타낼수 있다고 보는 것 같다. 객체라는 것도 숫자와 문자의 조합으로 표현되는 좀더 복잡한 자료형일 뿐이다. 그래서 data가 무엇인가? 라는 질문에 대한 대답은 인간의 입장에서, 혹은 programming language입장에서 다르게 본다고 말할 수도 있을 것이다. 하지만, 이 세상, 이 모든것이 data란 생각은 변하지 않는다. 그것을 어떻게 표현하느냐의 차이만 있을 뿐이다. 따라서 두번째 질문 어떤 data들이 있는가?에 대한 답은 표현하는 주체에 따라 다를 수 있다고 말 할 수 있다.
#+end_note
* Data type과 structure
#+begin_note
Data structure와 data type을 구분 못하는 사람이 많다. 혹은 혼용해서 사용하기도 한다. 그런데 data type과  data structure는 다른것이다. data structure는 collection이다. 즉 여러개의 data를 모아놓은 것이다. 예를 들면, array, list, tree, graph들은 모두 내부에 데이터 원소를 여러개 가지고 있다. 반면에 data type은 data의 종류를 나타낼 뿐이다. data의 종류는 위에서도 말했듯이 그것을 취급하는 주체에 따라 달라질 수 있는 것이다. 이 세상 모든 것들이 data type이 될 수 도 있고, 숫자와 문자 boolean형으로, 그리고 그것을 조합한 객체들로 세상을 표현할 수 있다는 programming language입장에서는 그것이 data type이 된다. 언어별로도 다른 것이다. 
#+end_note
* 특이한 관계 data structure와 data type
#+begin_note
data structure는 data를 담는 collection이라고 했다. data collection에 있는 각각의 data는 data type을 갖는다. 그러면서 또한, data collection이 data type이 될 수 있다. 그러면 type화 한 data collection을 담는 data collection도 있을 수가 있는 것이다. 예를 들어보자. array of array, list of list, tree of tree가 있을 수 있다는 얘기다. 
#+end_note
* Data structure와 알고리즘.
#+begin_note
우리가 문제를 해결한다고 할때, 문제에 사용되는 data는 문제에서 기술된다. 그래서 문제를 읽고, 혹은 보고, 우리는 data들이 programming language로 처리할 때, 어떤 data type으로 처리해야할 지는 직관적으로 알 수 있다. 예를 들어 숫자면 integer, or float, 문자면 string...이런식으로 직관적으로 와 닿는다. 그러면 data structure는 어떻게 사용해야 하고, 언제 사용되는가? 하는 질문을 할 수 있다. data structure는 data를 담는 collection이라고 했다.  어떤 collection을 사용할지 선택의 문제는, 예상외로 어렵다. 왜냐면, 문제를 종합적으로 이해해야 하기 때문이다. 즉 문제에서 collection이 필요하다고 판단을 했다면, 어떤 collection을 사용하는 가?는 문제의 구조에 따라 달라지기 때문이다. 문제가 collection에서 search를 많이 한다면, search를 빠르게 할수 있는 collection을 사용해야 한다. 예를 들면 tree처럼.. 또 어떤 문제는 data를 저장하는 operation이 자주사용된다면, 오직 저장을 위해서 사용되는 program을 만들어야 한다면, linked list를 사용할수도 있는것이다. 고정된 크기의 이미지같은 data를 저장해야 한다면, 혹은 크기를 예상할 수 있다면, array를 사용하는 것도 나쁘지 않다. 이렇듯 data strucutre는 data structure마다, operation에 따른 걸리는 시간이 다 다르다. 효율적인, 그리고 빠른 실행을 위해서는 문제를 정확히 이해하고 문제에 따라, data structure가 필요한지 안한지? 판단하고 필요하다면, 어떤 operation을 자주 사용하는지를 생각해서 data structure를 선택해야 한다. 즉 data structure의 선택은 문제에 달려있다. 이제 알고리즘에 대해서 얘기해 보자. 알고리즘은  data structure와 연관되서 자주 언급된다. 그래서 매우 밀접한 관계 내지는 동일한 것으로 이해한다. 하지만, 둘은 동작에 따른 time complex를 측정할 수 있다는 면에선 비슷하다. algorithms의 수행속도라던가, data structure의 operation이 가진 수행 속도를 측정하기 때문이다. 하지만 동작원리는 매우 다른거 같다. 알고리즘에서 바라보는 data는 무한에 가까운 collection이던, 10개정도의 data를 가진 collection이던, 한개의 data던, 모두 변수로 바라본다. 알고리즘은 data를  일반화하기 때문이다. 그래서 algorithm만 바라본다면, data structure는 별다른 혹은 별도의 알고리즘이라고 볼 수 있다. 
#+end_note
* practical programming language에서 default ds
#+begin_note
data structure는 data의 collection이라고 했다. programming language에서는 builtin collection은 list혹은 array만 지원된다. 왜 그럴까?  programming language를 해석하는 interpreter입장에서 process는 collection of data이다. interpreter는 메모리에 올려져있는 program을 가져와서 처리하기 위해선 collection이 필요하다. 이것을 array혹은 list를 사용하기 때문에 builtin data structure는 dynamic array or list가 된다. 나머지 graph라던지 stack heap과 같은 것은 programming 언어에서 만들어서 사용해야 한다. programming언어에서 제공하는 default ds인 list나 array에서 다른 ds로 변환을 하던지, 아니면  새롭게 ds를 만든 후, I/O를 통해서 data를 가져온후 새로운 ds에 넣는 방식을 취해야 한다.

- programming에서 data structure
  program은 big data혹은 엄청나게 많은 data를 처리할 수 있다. data는 memory에 있을 수도 있고, file에 있을 수도 있고, 다른 computer나 db에 있을 수도 있다. program이 이런 data를 처리하기 위해선, 첫번째 조건은 memory에 data가 있어야 한다는 점이다. data가 메모리에 있더라도,  메모리에 접근할수 있어야 하는 것이다. 메모리에 접근하기 위해서는 program내의 data structure로 data를 이동해야 한다. data가 메모리에 없다면 I/O를 통해서 가져오고,다른 process가 가진 데이터라면, 다른 process로 부터 data의 위치를 pointer로 건네 받아야 한다. os의 도움을 받을 수 도 있다. 여튼 data는 메모리에 올려지게 되는데, 기본적으로 memory에 올려진 data는 array라는 data structure로 볼 수 있다. 그래서 array나 list가 default data structure가 된다.   
#+end_note

